<?xml version="1.0"?>
<?xml-model href="http://download.ros.org/schema/package_format2.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?>
<package format="2">
  <name>accelerated_doublevadd_publisher</name>
  <version>0.1.0</version>
  <description>A trivial vector-add ROS 2 publisher that adds two
    inputs to a vector in a loop and attempts to publish them on the go 
    at 10 Hz. Vector add operations are offloaded into to the FPGA.

    This example builds on top of "vadd_publisher" which is only able to
    publish at 2 Hz on the quad-core Cortex-A53 Application Processing 
    Units (APUs) of the Zynq Ultrascale+ (ZU+) SoC.

    The offloading operation into the FPGA (or to the Programmable Logic (PL))
    allows the publisher to improve its publishing rate from 2 Hz, up to 6 Hz.
    For that, the HLS INTERFACE pragma is used. The HLS INTERFACE specifies 
    how RTL ports are created from the function definition during interface 
    synthesis. Sharing ports helps save FPGA resources by eliminating AXI 
    interfaces, but it can limit the performance of the kernel because all the 
    memory transfers have to go through a single port. The m_axi port has 
    independent READ and WRITE channels, so with a single m_axi port, we can do 
    reads and writes simultaneously but since the kernel (vadd) has two vectors 
    from where its reading (simultaneously), we can optimize the dataflows by 
    simply asking for an extra AXI interface.
    
    After using the PL, accelerated_doublevadd_publisher is able to publish at 6 Hz in 
    the ZU+, still far from its targeted rate (10 Hz). See "vadd_publisher"
    for a version running purely on the APUs (2 Hz). See "faster_vadd_publisher" 
    for yet another version of this publisher which further leverages HLS pragmas 
    to meet the targeted rate (10 Hz).
  </description>
  <maintainer email="victorma@xilinx.com">Víctor Mayoral Vilches</maintainer>
  <license>Apache License 2.0</license>
  <author email="victorma@xilinx.com">Víctor Mayoral Vilches</author>

  <buildtool_depend>ament_cmake</buildtool_depend>
  <buildtool_depend>ament_vitis</buildtool_depend>

  <build_depend>rclcpp</build_depend>
  <build_depend>std_msgs</build_depend>
  <!-- <build_depend>acceleration_firmware_xilinx</build_depend> -->

  <exec_depend>rclcpp</exec_depend>
  <exec_depend>std_msgs</exec_depend>
  <exec_depend>acceleration_firmware_xilinx</exec_depend>

  <test_depend>ament_lint_auto</test_depend>
  <test_depend>ament_lint_common</test_depend>

  <export>
    <build_type>ament_cmake</build_type>
  </export>
</package>
